// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: interface.capnp

#include "interface.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<32> b_f8d89e4b70b38ecb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    203, 142, 179, 112,  75, 158, 216, 248,
     16,   0,   0,   0,   1,   0,   0,   0,
    117,  28, 139, 157, 192, 225, 196, 179,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     82, 101, 113, 117, 101, 115, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 115, 103,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f8d89e4b70b38ecb = b_f8d89e4b70b38ecb.words;
#if !CAPNP_LITE
static const uint16_t m_f8d89e4b70b38ecb[] = {0};
static const uint16_t i_f8d89e4b70b38ecb[] = {0};
const ::capnp::_::RawSchema s_f8d89e4b70b38ecb = {
  0xf8d89e4b70b38ecb, b_f8d89e4b70b38ecb.words, 32, nullptr, m_f8d89e4b70b38ecb,
  0, 1, i_f8d89e4b70b38ecb, nullptr, nullptr, { &s_f8d89e4b70b38ecb, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_92a2ca7146b9a23f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     63, 162, 185,  70, 113, 202, 162, 146,
     16,   0,   0,   0,   1,   0,   0,   0,
    117,  28, 139, 157, 192, 225, 196, 179,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     82, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 112, 108, 121,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_92a2ca7146b9a23f = b_92a2ca7146b9a23f.words;
#if !CAPNP_LITE
static const uint16_t m_92a2ca7146b9a23f[] = {0};
static const uint16_t i_92a2ca7146b9a23f[] = {0};
const ::capnp::_::RawSchema s_92a2ca7146b9a23f = {
  0x92a2ca7146b9a23f, b_92a2ca7146b9a23f.words, 33, nullptr, m_92a2ca7146b9a23f,
  0, 1, i_92a2ca7146b9a23f, nullptr, nullptr, { &s_92a2ca7146b9a23f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_b3f1de2115d3117e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    126,  17, 211,  21,  33, 222, 241, 179,
     16,   0,   0,   0,   3,   0,   0,   0,
    117,  28, 139, 157, 192, 225, 196, 179,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 199,   0,   0,   0,
    153,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     77, 121,  73, 110, 116, 101, 114, 102,
     97,  99, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    106,  75, 222, 174, 180, 242, 141, 216,
    181, 134, 114,  55, 135, 162, 227, 191,
     81,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    172,  24,  85,  37, 214, 223, 166, 216,
    114,  93, 226, 169, 171, 145,  75, 206,
     57,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     42, 199, 221, 131, 166,   4, 118, 152,
      5, 217,  74, 148, 147,  10, 147, 246,
     37,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
    102, 111, 111,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 117,  98, 115,  99, 114, 105,  98,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 111, 110, 110, 101,  99, 116,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b3f1de2115d3117e = b_b3f1de2115d3117e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b3f1de2115d3117e[] = {
  &s_987604a683ddc72a,
  &s_bfe3a287377286b5,
  &s_ce4b91aba9e25d72,
  &s_d88df2b4aede4b6a,
  &s_d8a6dfd6255518ac,
  &s_f6930a93944ad905,
};
static const uint16_t m_b3f1de2115d3117e[] = {2, 0, 1};
const ::capnp::_::RawSchema s_b3f1de2115d3117e = {
  0xb3f1de2115d3117e, b_b3f1de2115d3117e.words, 50, d_b3f1de2115d3117e, m_b3f1de2115d3117e,
  6, 3, nullptr, nullptr, nullptr, { &s_b3f1de2115d3117e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_d88df2b4aede4b6a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    106,  75, 222, 174, 180, 242, 141, 216,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     77, 121,  73, 110, 116, 101, 114, 102,
     97,  99, 101,  46, 102, 111, 111,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    203, 142, 179, 112,  75, 158, 216, 248,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d88df2b4aede4b6a = b_d88df2b4aede4b6a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d88df2b4aede4b6a[] = {
  &s_f8d89e4b70b38ecb,
};
static const uint16_t m_d88df2b4aede4b6a[] = {0};
static const uint16_t i_d88df2b4aede4b6a[] = {0};
const ::capnp::_::RawSchema s_d88df2b4aede4b6a = {
  0xd88df2b4aede4b6a, b_d88df2b4aede4b6a.words, 33, d_d88df2b4aede4b6a, m_d88df2b4aede4b6a,
  1, 1, i_d88df2b4aede4b6a, nullptr, nullptr, { &s_d88df2b4aede4b6a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_bfe3a287377286b5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    181, 134, 114,  55, 135, 162, 227, 191,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     77, 121,  73, 110, 116, 101, 114, 102,
     97,  99, 101,  46, 102, 111, 111,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     63, 162, 185,  70, 113, 202, 162, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bfe3a287377286b5 = b_bfe3a287377286b5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bfe3a287377286b5[] = {
  &s_92a2ca7146b9a23f,
};
static const uint16_t m_bfe3a287377286b5[] = {0};
static const uint16_t i_bfe3a287377286b5[] = {0};
const ::capnp::_::RawSchema s_bfe3a287377286b5 = {
  0xbfe3a287377286b5, b_bfe3a287377286b5.words, 34, d_bfe3a287377286b5, m_bfe3a287377286b5,
  1, 1, i_bfe3a287377286b5, nullptr, nullptr, { &s_bfe3a287377286b5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_d8a6dfd6255518ac = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    172,  24,  85,  37, 214, 223, 166, 216,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     77, 121,  73, 110, 116, 101, 114, 102,
     97,  99, 101,  46, 115, 117,  98, 115,
     99, 114, 105,  98, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d8a6dfd6255518ac = b_d8a6dfd6255518ac.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d8a6dfd6255518ac = {
  0xd8a6dfd6255518ac, b_d8a6dfd6255518ac.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d8a6dfd6255518ac, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_ce4b91aba9e25d72 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    114,  93, 226, 169, 171, 145,  75, 206,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     77, 121,  73, 110, 116, 101, 114, 102,
     97,  99, 101,  46, 115, 117,  98, 115,
     99, 114, 105,  98, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_ce4b91aba9e25d72 = b_ce4b91aba9e25d72.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ce4b91aba9e25d72 = {
  0xce4b91aba9e25d72, b_ce4b91aba9e25d72.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ce4b91aba9e25d72, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_987604a683ddc72a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     42, 199, 221, 131, 166,   4, 118, 152,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     77, 121,  73, 110, 116, 101, 114, 102,
     97,  99, 101,  46,  99, 111, 110, 110,
    101,  99, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 116,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    233, 129, 253,  15,  82,  54, 224, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_987604a683ddc72a = b_987604a683ddc72a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_987604a683ddc72a[] = {
  &s_85e036520ffd81e9,
};
static const uint16_t m_987604a683ddc72a[] = {0};
static const uint16_t i_987604a683ddc72a[] = {0};
const ::capnp::_::RawSchema s_987604a683ddc72a = {
  0x987604a683ddc72a, b_987604a683ddc72a.words, 34, d_987604a683ddc72a, m_987604a683ddc72a,
  1, 1, i_987604a683ddc72a, nullptr, nullptr, { &s_987604a683ddc72a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_f6930a93944ad905 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      5, 217,  74, 148, 147,  10, 147, 246,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     77, 121,  73, 110, 116, 101, 114, 102,
     97,  99, 101,  46,  99, 111, 110, 110,
    101,  99, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f6930a93944ad905 = b_f6930a93944ad905.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f6930a93944ad905 = {
  0xf6930a93944ad905, b_f6930a93944ad905.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f6930a93944ad905, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_85e036520ffd81e9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233, 129, 253,  15,  82,  54, 224, 133,
     16,   0,   0,   0,   1,   0,   1,   0,
    117,  28, 139, 157, 192, 225, 196, 179,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     86,  97, 116,  73, 100,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_85e036520ffd81e9 = b_85e036520ffd81e9.words;
#if !CAPNP_LITE
static const uint16_t m_85e036520ffd81e9[] = {0};
static const uint16_t i_85e036520ffd81e9[] = {0};
const ::capnp::_::RawSchema s_85e036520ffd81e9 = {
  0x85e036520ffd81e9, b_85e036520ffd81e9.words, 32, nullptr, m_85e036520ffd81e9,
  0, 1, i_85e036520ffd81e9, nullptr, nullptr, { &s_85e036520ffd81e9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// Request
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Request::_capnpPrivate::dataWordSize;
constexpr uint16_t Request::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Request::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Request::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Response
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Response::_capnpPrivate::dataWordSize;
constexpr uint16_t Response::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Response::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Response::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::MyInterface::FooParams,  ::MyInterface::FooResults>
MyInterface::Client::fooRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::MyInterface::FooParams,  ::MyInterface::FooResults>(
      0xb3f1de2115d3117eull, 0, sizeHint, {true});
}
::kj::Promise<void> MyInterface::Server::foo(FooContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "interface.capnp:MyInterface", "foo",
      0xb3f1de2115d3117eull, 0);
}
::capnp::Request< ::MyInterface::SubscribeParams,  ::MyInterface::SubscribeResults>
MyInterface::Client::subscribeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::MyInterface::SubscribeParams,  ::MyInterface::SubscribeResults>(
      0xb3f1de2115d3117eull, 1, sizeHint, {true});
}
::kj::Promise<void> MyInterface::Server::subscribe(SubscribeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "interface.capnp:MyInterface", "subscribe",
      0xb3f1de2115d3117eull, 1);
}
::capnp::Request< ::MyInterface::ConnectParams,  ::MyInterface::ConnectResults>
MyInterface::Client::connectRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::MyInterface::ConnectParams,  ::MyInterface::ConnectResults>(
      0xb3f1de2115d3117eull, 2, sizeHint, {true});
}
::kj::Promise<void> MyInterface::Server::connect(ConnectContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "interface.capnp:MyInterface", "connect",
      0xb3f1de2115d3117eull, 2);
}
::capnp::Capability::Server::DispatchCallResult MyInterface::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb3f1de2115d3117eull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("interface.capnp:MyInterface", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult MyInterface::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        foo(::capnp::Capability::Server::internalGetTypedContext<
             ::MyInterface::FooParams,  ::MyInterface::FooResults>(context)),
        false,
        false
      };
    case 1:
      return {
        subscribe(::capnp::Capability::Server::internalGetTypedContext<
             ::MyInterface::SubscribeParams,  ::MyInterface::SubscribeResults>(context)),
        false,
        false
      };
    case 2:
      return {
        connect(::capnp::Capability::Server::internalGetTypedContext<
             ::MyInterface::ConnectParams,  ::MyInterface::ConnectResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "interface.capnp:MyInterface",
          0xb3f1de2115d3117eull, methodId);
  }
}
#endif  // !CAPNP_LITE

// MyInterface
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MyInterface::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MyInterface::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MyInterface::FooParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MyInterface::FooParams::_capnpPrivate::dataWordSize;
constexpr uint16_t MyInterface::FooParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MyInterface::FooParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MyInterface::FooParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MyInterface::FooResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MyInterface::FooResults::_capnpPrivate::dataWordSize;
constexpr uint16_t MyInterface::FooResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MyInterface::FooResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MyInterface::FooResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MyInterface::SubscribeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MyInterface::SubscribeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t MyInterface::SubscribeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MyInterface::SubscribeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MyInterface::SubscribeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MyInterface::SubscribeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MyInterface::SubscribeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t MyInterface::SubscribeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MyInterface::SubscribeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MyInterface::SubscribeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MyInterface::ConnectParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MyInterface::ConnectParams::_capnpPrivate::dataWordSize;
constexpr uint16_t MyInterface::ConnectParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MyInterface::ConnectParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MyInterface::ConnectParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MyInterface::ConnectResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MyInterface::ConnectResults::_capnpPrivate::dataWordSize;
constexpr uint16_t MyInterface::ConnectResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MyInterface::ConnectResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MyInterface::ConnectResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// VatId
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t VatId::_capnpPrivate::dataWordSize;
constexpr uint16_t VatId::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind VatId::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* VatId::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



